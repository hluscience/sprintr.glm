// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// calc_mu_log
arma::vec calc_mu_log(const arma::vec& x, const double& beta, const arma::vec& offset);
RcppExport SEXP _sprintr_glm_calc_mu_log(SEXP xSEXP, SEXP betaSEXP, SEXP offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type offset(offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_mu_log(x, beta, offset));
    return rcpp_result_gen;
END_RCPP
}
// logistic
double logistic(const arma::vec& x, const arma::vec& y, const arma::vec& offset);
RcppExport SEXP _sprintr_glm_logistic(SEXP xSEXP, SEXP ySEXP, SEXP offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type offset(offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(logistic(x, y, offset));
    return rcpp_result_gen;
END_RCPP
}
// calc_mu_pois
arma::vec calc_mu_pois(const arma::vec& x, const double& beta, const arma::vec& offset);
RcppExport SEXP _sprintr_glm_calc_mu_pois(SEXP xSEXP, SEXP betaSEXP, SEXP offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type offset(offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_mu_pois(x, beta, offset));
    return rcpp_result_gen;
END_RCPP
}
// poisson
double poisson(const arma::vec& x, const arma::vec& y, const arma::vec& offset);
RcppExport SEXP _sprintr_glm_poisson(SEXP xSEXP, SEXP ySEXP, SEXP offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type offset(offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(poisson(x, y, offset));
    return rcpp_result_gen;
END_RCPP
}
// calc_mu_multi
arma::mat calc_mu_multi(const arma::colvec& x, const arma::rowvec& beta, const arma::mat& offset);
RcppExport SEXP _sprintr_glm_calc_mu_multi(SEXP xSEXP, SEXP betaSEXP, SEXP offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type offset(offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_mu_multi(x, beta, offset));
    return rcpp_result_gen;
END_RCPP
}
// multi
double multi(const arma::vec& x, const arma::vec& y, const arma::mat& offset, const int& K);
RcppExport SEXP _sprintr_glm_multi(SEXP xSEXP, SEXP ySEXP, SEXP offsetSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(multi(x, y, offset, K));
    return rcpp_result_gen;
END_RCPP
}
// calc_delta_ordinal
arma::mat calc_delta_ordinal(const arma::mat& etaMat);
RcppExport SEXP _sprintr_glm_calc_delta_ordinal(SEXP etaMatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type etaMat(etaMatSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_delta_ordinal(etaMat));
    return rcpp_result_gen;
END_RCPP
}
// calc_eta_ordinal
arma::rowvec calc_eta_ordinal(const arma::rowvec& delta);
RcppExport SEXP _sprintr_glm_calc_eta_ordinal(SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::rowvec& >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_eta_ordinal(delta));
    return rcpp_result_gen;
END_RCPP
}
// tran_xspan
arma::vec tran_xspan(const arma::vec& x, const int& K);
RcppExport SEXP _sprintr_glm_tran_xspan(SEXP xSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(tran_xspan(x, K));
    return rcpp_result_gen;
END_RCPP
}
// tran_yspan
arma::mat tran_yspan(const arma::vec& y, const int& n, const int& K);
RcppExport SEXP _sprintr_glm_tran_yspan(SEXP ySEXP, SEXP nSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(tran_yspan(y, n, K));
    return rcpp_result_gen;
END_RCPP
}
// ordinal
double ordinal(const arma::vec& x, const arma::vec& y, const arma::mat& offset, const int& n, const int& K);
RcppExport SEXP _sprintr_glm_ordinal(SEXP xSEXP, SEXP ySEXP, SEXP offsetSEXP, SEXP nSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(ordinal(x, y, offset, n, K));
    return rcpp_result_gen;
END_RCPP
}
// ordinal_sparse
double ordinal_sparse(const arma::vec x, const arma::vec& y, const arma::sp_mat& yMat, const arma::mat& offset, const int& n, const int& K);
RcppExport SEXP _sprintr_glm_ordinal_sparse(SEXP xSEXP, SEXP ySEXP, SEXP yMatSEXP, SEXP offsetSEXP, SEXP nSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type yMat(yMatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(ordinal_sparse(x, y, yMat, offset, n, K));
    return rcpp_result_gen;
END_RCPP
}
// screen_cpp
arma::mat screen_cpp(const arma::mat& x, const arma::vec& y, const int& nlev, const arma::mat& offset, const int& num_keep, const bool square, const bool main_effect, std::string family);
RcppExport SEXP _sprintr_glm_screen_cpp(SEXP xSEXP, SEXP ySEXP, SEXP nlevSEXP, SEXP offsetSEXP, SEXP num_keepSEXP, SEXP squareSEXP, SEXP main_effectSEXP, SEXP familySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const int& >::type nlev(nlevSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< const int& >::type num_keep(num_keepSEXP);
    Rcpp::traits::input_parameter< const bool >::type square(squareSEXP);
    Rcpp::traits::input_parameter< const bool >::type main_effect(main_effectSEXP);
    Rcpp::traits::input_parameter< std::string >::type family(familySEXP);
    rcpp_result_gen = Rcpp::wrap(screen_cpp(x, y, nlev, offset, num_keep, square, main_effect, family));
    return rcpp_result_gen;
END_RCPP
}
// screen_sparse_cpp
arma::mat screen_sparse_cpp(const arma::sp_mat& x, const arma::vec& y, const arma::sp_mat& yMat, const int& nlev, const arma::mat& offset, const int& num_keep, const bool square, const bool main_effect, std::string family);
RcppExport SEXP _sprintr_glm_screen_sparse_cpp(SEXP xSEXP, SEXP ySEXP, SEXP yMatSEXP, SEXP nlevSEXP, SEXP offsetSEXP, SEXP num_keepSEXP, SEXP squareSEXP, SEXP main_effectSEXP, SEXP familySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type yMat(yMatSEXP);
    Rcpp::traits::input_parameter< const int& >::type nlev(nlevSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< const int& >::type num_keep(num_keepSEXP);
    Rcpp::traits::input_parameter< const bool >::type square(squareSEXP);
    Rcpp::traits::input_parameter< const bool >::type main_effect(main_effectSEXP);
    Rcpp::traits::input_parameter< std::string >::type family(familySEXP);
    rcpp_result_gen = Rcpp::wrap(screen_sparse_cpp(x, y, yMat, nlev, offset, num_keep, square, main_effect, family));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sprintr_glm_calc_mu_log", (DL_FUNC) &_sprintr_glm_calc_mu_log, 3},
    {"_sprintr_glm_logistic", (DL_FUNC) &_sprintr_glm_logistic, 3},
    {"_sprintr_glm_calc_mu_pois", (DL_FUNC) &_sprintr_glm_calc_mu_pois, 3},
    {"_sprintr_glm_poisson", (DL_FUNC) &_sprintr_glm_poisson, 3},
    {"_sprintr_glm_calc_mu_multi", (DL_FUNC) &_sprintr_glm_calc_mu_multi, 3},
    {"_sprintr_glm_multi", (DL_FUNC) &_sprintr_glm_multi, 4},
    {"_sprintr_glm_calc_delta_ordinal", (DL_FUNC) &_sprintr_glm_calc_delta_ordinal, 1},
    {"_sprintr_glm_calc_eta_ordinal", (DL_FUNC) &_sprintr_glm_calc_eta_ordinal, 1},
    {"_sprintr_glm_tran_xspan", (DL_FUNC) &_sprintr_glm_tran_xspan, 2},
    {"_sprintr_glm_tran_yspan", (DL_FUNC) &_sprintr_glm_tran_yspan, 3},
    {"_sprintr_glm_ordinal", (DL_FUNC) &_sprintr_glm_ordinal, 5},
    {"_sprintr_glm_ordinal_sparse", (DL_FUNC) &_sprintr_glm_ordinal_sparse, 6},
    {"_sprintr_glm_screen_cpp", (DL_FUNC) &_sprintr_glm_screen_cpp, 8},
    {"_sprintr_glm_screen_sparse_cpp", (DL_FUNC) &_sprintr_glm_screen_sparse_cpp, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_sprintr_glm(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
